"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toModifiers = exports.toClickOptions = exports.RecorderController = void 0;
const events_1 = require("../events");
const terminalOutput_1 = require("./terminalOutput");
class RecorderController {
    constructor(context, output) {
        this._performingAction = false;
        this._pageAliases = new Map();
        this._lastPopupOrdinal = 0;
        this._timers = new Set();
        this._output = new terminalOutput_1.TerminalOutput(output || process.stdout);
        context.on(events_1.Events.BrowserContext.Page, (page) => {
            // First page is called page, others are called popup1, popup2, etc.
            const pageName = this._pageAliases.size ? 'popup' + ++this._lastPopupOrdinal : 'page';
            this._pageAliases.set(page, pageName);
            page.on(events_1.Events.Page.Close, () => this._pageAliases.delete(page));
            // Input actions that potentially lead to navigation are intercepted on the page and are
            // performed by the Playwright.
            page.exposeBinding('performPlaywrightAction', (source, action) => this._performAction(source.frame, action)).catch(e => { });
            // Other non-essential actions are simply being recorded.
            page.exposeBinding('recordPlaywrightAction', (source, action) => this._recordAction(source.frame, action)).catch(e => { });
            page.on(events_1.Events.Page.FrameNavigated, (frame) => this._onFrameNavigated(frame));
            page.on(events_1.Events.Page.Popup, (popup) => this._onPopup(page, popup));
        });
        context.once(events_1.Events.BrowserContext.Close, () => {
            for (const timer of this._timers)
                clearTimeout(timer);
            this._timers.clear();
        });
    }
    async _performAction(frame, action) {
        this._performingAction = true;
        this._recordAction(frame, action);
        if (action.name === 'click') {
            const { options } = toClickOptions(action);
            await frame.click(action.selector, options);
        }
        if (action.name === 'press') {
            const modifiers = toModifiers(action.modifiers);
            const shortcut = [...modifiers, action.key].join('+');
            await frame.press(action.selector, shortcut);
        }
        if (action.name === 'check')
            await frame.check(action.selector);
        if (action.name === 'uncheck')
            await frame.uncheck(action.selector);
        if (action.name === 'select')
            await frame.selectOption(action.selector, action.options);
        this._performingAction = false;
        const timer = setTimeout(() => {
            action.committed = true;
            this._timers.delete(timer);
        }, 5000);
        this._timers.add(timer);
    }
    async _recordAction(frame, action) {
        this._output.addAction(this._pageAliases.get(frame._page), frame, action);
    }
    _onFrameNavigated(frame) {
        if (frame.parentFrame())
            return;
        const pageAlias = this._pageAliases.get(frame._page);
        const action = this._output.lastAction();
        // We only augment actions that have not been committed.
        if (action && !action.committed && action.name !== 'navigate') {
            // If we hit a navigation while action is executed, we assert it. Otherwise, we await it.
            this._output.signal(pageAlias, frame, { name: 'navigation', url: frame.url(), type: this._performingAction ? 'assert' : 'await' });
        }
        else if (!action || action.committed) {
            // If navigation happens out of the blue, we just log it.
            this._output.addAction(pageAlias, frame, {
                name: 'navigate',
                url: frame.url(),
                signals: [],
            });
        }
    }
    _onPopup(page, popup) {
        const pageAlias = this._pageAliases.get(page);
        const popupAlias = this._pageAliases.get(popup);
        const action = this._output.lastAction();
        // We only augment actions that have not been committed.
        if (action && !action.committed) {
            // If we hit a navigation while action is executed, we assert it. Otherwise, we await it.
            this._output.signal(pageAlias, page.mainFrame(), { name: 'popup', popupAlias });
        }
    }
}
exports.RecorderController = RecorderController;
function toClickOptions(action) {
    let method = 'click';
    if (action.clickCount === 2)
        method = 'dblclick';
    const modifiers = toModifiers(action.modifiers);
    const options = {};
    if (action.button !== 'left')
        options.button = action.button;
    if (modifiers.length)
        options.modifiers = modifiers;
    if (action.clickCount > 2)
        options.clickCount = action.clickCount;
    return { method, options };
}
exports.toClickOptions = toClickOptions;
function toModifiers(modifiers) {
    const result = [];
    if (modifiers & 1)
        result.push('Alt');
    if (modifiers & 2)
        result.push('Control');
    if (modifiers & 4)
        result.push('Meta');
    if (modifiers & 8)
        result.push('Shift');
    return result;
}
exports.toModifiers = toModifiers;
//# sourceMappingURL=recorderController.js.map