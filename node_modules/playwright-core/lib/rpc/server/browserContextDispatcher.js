"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserContextDispatcher = void 0;
const events_1 = require("../../events");
const dispatcher_1 = require("./dispatcher");
const pageDispatcher_1 = require("./pageDispatcher");
const networkDispatchers_1 = require("./networkDispatchers");
const page_1 = require("../../page");
class BrowserContextDispatcher extends dispatcher_1.Dispatcher {
    constructor(scope, context) {
        super(scope, context, 'context', {
            pages: context.pages().map(p => new pageDispatcher_1.PageDispatcher(scope, p))
        }, true);
        this._context = context;
        context.on(events_1.Events.BrowserContext.Page, page => this._dispatchEvent('page', new pageDispatcher_1.PageDispatcher(this._scope, page)));
        context.on(events_1.Events.BrowserContext.Close, () => {
            this._dispatchEvent('close');
            this._scope.dispose();
        });
    }
    async setDefaultNavigationTimeoutNoReply(params) {
        this._context.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params) {
        this._context.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params) {
        await this._context.exposeBinding(params.name, (source, ...args) => {
            const bindingCall = new pageDispatcher_1.BindingCallDispatcher(this._scope, params.name, source, args);
            this._dispatchEvent('bindingCall', bindingCall);
            return bindingCall.promise();
        });
    }
    async newPage() {
        return dispatcher_1.lookupDispatcher(await this._context.newPage());
    }
    async cookies(params) {
        return await this._context.cookies(params.urls);
    }
    async addCookies(params) {
        await this._context.addCookies(params.cookies);
    }
    async clearCookies() {
        await this._context.clearCookies();
    }
    async grantPermissions(params) {
        await this._context.grantPermissions(params.permissions, params.options);
    }
    async clearPermissions() {
        await this._context.clearPermissions();
    }
    async setGeolocation(params) {
        await this._context.setGeolocation(params.geolocation);
    }
    async setExtraHTTPHeaders(params) {
        await this._context.setExtraHTTPHeaders(params.headers);
    }
    async setOffline(params) {
        await this._context.setOffline(params.offline);
    }
    async setHTTPCredentials(params) {
        await this._context.setHTTPCredentials(params.httpCredentials);
    }
    async addInitScript(params) {
        await this._context._doAddInitScript(params.source);
    }
    async setNetworkInterceptionEnabled(params) {
        if (!params.enabled) {
            await this._context.unroute('**/*');
            return;
        }
        this._context.route('**/*', (route, request) => {
            this._dispatchEvent('route', { route: new networkDispatchers_1.RouteDispatcher(this._scope, route), request: networkDispatchers_1.RequestDispatcher.from(this._scope, request) });
        });
    }
    async waitForEvent(params) {
        const result = await this._context.waitForEvent(params.event);
        if (result instanceof page_1.Page)
            return dispatcher_1.lookupNullableDispatcher(result);
        return result;
    }
    async close() {
        await this._context.close();
    }
}
exports.BrowserContextDispatcher = BrowserContextDispatcher;
//# sourceMappingURL=browserContextDispatcher.js.map