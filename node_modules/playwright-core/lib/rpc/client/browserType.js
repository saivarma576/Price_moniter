"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserType = void 0;
const browser_1 = require("./browser");
const browserContext_1 = require("./browserContext");
const channelOwner_1 = require("./channelOwner");
const browserServer_1 = require("./browserServer");
class BrowserType extends channelOwner_1.ChannelOwner {
    constructor(scope, guid, initializer) {
        super(scope, guid, initializer);
    }
    executablePath() {
        return this._initializer.executablePath;
    }
    name() {
        return this._initializer.name;
    }
    async launch(options = {}) {
        delete options.logger;
        return browser_1.Browser.from(await this._channel.launch(options));
    }
    async launchServer(options = {}) {
        delete options.logger;
        return browserServer_1.BrowserServer.from(await this._channel.launchServer(options));
    }
    async launchPersistentContext(userDataDir, options = {}) {
        delete options.logger;
        return browserContext_1.BrowserContext.from(await this._channel.launchPersistentContext({ userDataDir, ...options }));
    }
    async connect(options) {
        delete options.logger;
        return browser_1.Browser.from(await this._channel.connect(options));
    }
}
exports.BrowserType = BrowserType;
//# sourceMappingURL=browserType.js.map