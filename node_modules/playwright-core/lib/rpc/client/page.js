"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForEvent = exports.BindingCall = exports.Page = void 0;
const errors_1 = require("../../errors");
const events_1 = require("../../events");
const helper_1 = require("../../helper");
const timeoutSettings_1 = require("../../timeoutSettings");
const serializers_1 = require("../serializers");
const accessibility_1 = require("./accessibility");
const channelOwner_1 = require("./channelOwner");
const consoleMessage_1 = require("./consoleMessage");
const dialog_1 = require("./dialog");
const download_1 = require("./download");
const elementHandle_1 = require("./elementHandle");
const worker_1 = require("./worker");
const frame_1 = require("./frame");
const input_1 = require("./input");
const network_1 = require("./network");
const fileChooser_1 = require("./fileChooser");
const buffer_1 = require("buffer");
class Page extends channelOwner_1.ChannelOwner {
    constructor(scope, guid, initializer) {
        super(scope, guid, initializer);
        this._frames = new Set();
        this._workers = new Set();
        this._closed = false;
        this._routes = [];
        this._bindings = new Map();
        this._pendingWaitForEvents = new Map();
        this._timeoutSettings = new timeoutSettings_1.TimeoutSettings();
        this._isPageCall = false;
        this.accessibility = new accessibility_1.Accessibility(this._channel);
        this.keyboard = new input_1.Keyboard(this._channel);
        this.mouse = new input_1.Mouse(this._channel);
        this._mainFrame = frame_1.Frame.from(initializer.mainFrame);
        this._mainFrame._page = this;
        this._frames.add(this._mainFrame);
        this._viewportSize = initializer.viewportSize;
        this._channel.on('bindingCall', bindingCall => this._onBinding(BindingCall.from(bindingCall)));
        this._channel.on('close', () => this._onClose());
        this._channel.on('console', message => this.emit(events_1.Events.Page.Console, consoleMessage_1.ConsoleMessage.from(message)));
        this._channel.on('crash', () => this._onCrash());
        this._channel.on('dialog', dialog => this.emit(events_1.Events.Page.Dialog, dialog_1.Dialog.from(dialog)));
        this._channel.on('domcontentloaded', () => this.emit(events_1.Events.Page.DOMContentLoaded));
        this._channel.on('download', download => this.emit(events_1.Events.Page.Download, download_1.Download.from(download)));
        this._channel.on('fileChooser', ({ element, isMultiple }) => this.emit(events_1.Events.Page.FileChooser, new fileChooser_1.FileChooser(this, elementHandle_1.ElementHandle.from(element), isMultiple)));
        this._channel.on('frameAttached', frame => this._onFrameAttached(frame_1.Frame.from(frame)));
        this._channel.on('frameDetached', frame => this._onFrameDetached(frame_1.Frame.from(frame)));
        this._channel.on('frameNavigated', ({ frame, url, name }) => this._onFrameNavigated(frame_1.Frame.from(frame), url, name));
        this._channel.on('load', () => this.emit(events_1.Events.Page.Load));
        this._channel.on('pageError', ({ error }) => this.emit(events_1.Events.Page.PageError, serializers_1.parseError(error)));
        this._channel.on('popup', popup => this.emit(events_1.Events.Page.Popup, Page.from(popup)));
        this._channel.on('request', request => this.emit(events_1.Events.Page.Request, network_1.Request.from(request)));
        this._channel.on('requestFailed', ({ request, failureText }) => this._onRequestFailed(network_1.Request.from(request), failureText));
        this._channel.on('requestFinished', request => this.emit(events_1.Events.Page.RequestFinished, network_1.Request.from(request)));
        this._channel.on('response', response => this.emit(events_1.Events.Page.Response, network_1.Response.from(response)));
        this._channel.on('route', ({ route, request }) => this._onRoute(network_1.Route.from(route), network_1.Request.from(request)));
        this._channel.on('worker', worker => this._onWorker(worker_1.Worker.from(worker)));
    }
    static from(page) {
        return page._object;
    }
    static fromNullable(page) {
        return page ? Page.from(page) : null;
    }
    _setBrowserContext(context) {
        this._browserContext = context;
        this._timeoutSettings = new timeoutSettings_1.TimeoutSettings(context._timeoutSettings);
    }
    _onRequestFailed(request, failureText) {
        request._failureText = failureText;
        this.emit(events_1.Events.Page.RequestFailed, request);
    }
    _onFrameAttached(frame) {
        frame._page = this;
        this._frames.add(frame);
        if (frame._parentFrame)
            frame._parentFrame._childFrames.add(frame);
        this.emit(events_1.Events.Page.FrameAttached, frame);
    }
    _onFrameDetached(frame) {
        this._frames.delete(frame);
        frame._detached = true;
        if (frame._parentFrame)
            frame._parentFrame._childFrames.delete(frame);
        this.emit(events_1.Events.Page.FrameDetached, frame);
    }
    _onFrameNavigated(frame, url, name) {
        frame._url = url;
        frame._name = name;
        this.emit(events_1.Events.Page.FrameNavigated, frame);
    }
    _onRoute(route, request) {
        for (const { url, handler } of this._routes) {
            if (helper_1.helper.urlMatches(request.url(), url)) {
                handler(route, request);
                return;
            }
        }
        this._browserContext._onRoute(route, request);
    }
    async _onBinding(bindingCall) {
        const func = this._bindings.get(bindingCall._initializer.name);
        if (func) {
            bindingCall.call(func);
            return;
        }
        this._browserContext._onBinding(bindingCall);
    }
    _onWorker(worker) {
        this._workers.add(worker);
        worker._page = this;
        this.emit(events_1.Events.Page.Worker, worker);
    }
    _onClose() {
        this._closed = true;
        this._browserContext._pages.delete(this);
        this._rejectPendingOperations(false);
        this.emit(events_1.Events.Page.Close);
    }
    _onCrash() {
        this._rejectPendingOperations(true);
        this.emit(events_1.Events.Page.Crash);
    }
    _rejectPendingOperations(isCrash) {
        for (const [listener, event] of this._pendingWaitForEvents) {
            if (event === events_1.Events.Page.Close && !isCrash)
                continue;
            if (event === events_1.Events.Page.Crash && isCrash)
                continue;
            listener(new Error(isCrash ? 'Page crashed' : 'Page closed'));
        }
        this._pendingWaitForEvents.clear();
    }
    context() {
        return this._browserContext;
    }
    async opener() {
        return Page.fromNullable(await this._channel.opener());
    }
    mainFrame() {
        return this._mainFrame;
    }
    frame(options) {
        const name = helper_1.helper.isString(options) ? options : options.name;
        const url = helper_1.helper.isObject(options) ? options.url : undefined;
        helper_1.assert(name || url, 'Either name or url matcher should be specified');
        return this.frames().find(f => {
            if (name)
                return f.name() === name;
            return helper_1.helper.urlMatches(f.url(), url);
        }) || null;
    }
    frames() {
        return [...this._frames];
    }
    setDefaultNavigationTimeout(timeout) {
        this._channel.setDefaultNavigationTimeoutNoReply({ timeout });
    }
    setDefaultTimeout(timeout) {
        this._timeoutSettings.setDefaultTimeout(timeout);
        this._channel.setDefaultTimeoutNoReply({ timeout });
    }
    _attributeToPage(func) {
        try {
            this._isPageCall = true;
            return func();
        }
        finally {
            this._isPageCall = false;
        }
    }
    async $(selector) {
        return this._attributeToPage(() => this._mainFrame.$(selector));
    }
    async waitForSelector(selector, options) {
        return this._attributeToPage(() => this._mainFrame.waitForSelector(selector, options));
    }
    async dispatchEvent(selector, type, eventInit, options) {
        return this._attributeToPage(() => this._mainFrame.dispatchEvent(selector, type, eventInit, options));
    }
    async evaluateHandle(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return this._attributeToPage(() => this._mainFrame.evaluateHandle(pageFunction, arg));
    }
    async $eval(selector, pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 3);
        return this._attributeToPage(() => this._mainFrame.$eval(selector, pageFunction, arg));
    }
    async $$eval(selector, pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 3);
        return this._attributeToPage(() => this._mainFrame.$$eval(selector, pageFunction, arg));
    }
    async $$(selector) {
        return this._attributeToPage(() => this._mainFrame.$$(selector));
    }
    async addScriptTag(options) {
        return this._attributeToPage(() => this._mainFrame.addScriptTag(options));
    }
    async addStyleTag(options) {
        return await this._mainFrame.addStyleTag(options);
    }
    async exposeFunction(name, playwrightFunction) {
        await this.exposeBinding(name, (options, ...args) => playwrightFunction(...args));
    }
    async exposeBinding(name, binding) {
        if (this._bindings.has(name))
            throw new Error(`Function "${name}" has been already registered`);
        if (this._browserContext._bindings.has(name))
            throw new Error(`Function "${name}" has been already registered in the browser context`);
        this._bindings.set(name, binding);
        await this._channel.exposeBinding({ name });
    }
    async setExtraHTTPHeaders(headers) {
        await this._channel.setExtraHTTPHeaders({ headers });
    }
    url() {
        return this._attributeToPage(() => this._mainFrame.url());
    }
    async content() {
        return this._attributeToPage(() => this._mainFrame.content());
    }
    async setContent(html, options) {
        return this._attributeToPage(() => this._mainFrame.setContent(html, options));
    }
    async goto(url, options) {
        return this._attributeToPage(() => this._mainFrame.goto(url, options));
    }
    async reload(options = {}) {
        return network_1.Response.fromNullable(await this._channel.reload(options));
    }
    async waitForLoadState(state, options) {
        return this._attributeToPage(() => this._mainFrame.waitForLoadState(state, options));
    }
    async waitForNavigation(options) {
        return this._attributeToPage(() => this._mainFrame.waitForNavigation(options));
    }
    async waitForRequest(urlOrPredicate, options = {}) {
        const predicate = (request) => {
            if (helper_1.helper.isString(urlOrPredicate) || helper_1.helper.isRegExp(urlOrPredicate))
                return helper_1.helper.urlMatches(request.url(), urlOrPredicate);
            return urlOrPredicate(request);
        };
        return this.waitForEvent(events_1.Events.Page.Request, { predicate, timeout: options.timeout });
    }
    async waitForResponse(urlOrPredicate, options = {}) {
        const predicate = (response) => {
            if (helper_1.helper.isString(urlOrPredicate) || helper_1.helper.isRegExp(urlOrPredicate))
                return helper_1.helper.urlMatches(response.url(), urlOrPredicate);
            return urlOrPredicate(response);
        };
        return this.waitForEvent(events_1.Events.Page.Response, { predicate, timeout: options.timeout });
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
        let reject;
        const result = await Promise.race([
            waitForEvent(this, event, optionsOrPredicate, this._timeoutSettings.timeout(optionsOrPredicate instanceof Function ? {} : optionsOrPredicate)),
            new Promise((f, r) => { reject = r; this._pendingWaitForEvents.set(reject, event); })
        ]);
        this._pendingWaitForEvents.delete(reject);
        return result;
    }
    async goBack(options = {}) {
        return network_1.Response.fromNullable(await this._channel.goBack(options));
    }
    async goForward(options = {}) {
        return network_1.Response.fromNullable(await this._channel.goForward(options));
    }
    async emulateMedia(options) {
        await this._channel.emulateMedia(options);
    }
    async setViewportSize(viewportSize) {
        this._viewportSize = viewportSize;
        await this._channel.setViewportSize({ viewportSize });
    }
    viewportSize() {
        return this._viewportSize;
    }
    async evaluate(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return this._attributeToPage(() => this._mainFrame.evaluate(pageFunction, arg));
    }
    async addInitScript(script, arg) {
        const source = await helper_1.helper.evaluationScript(script, arg);
        await this._channel.addInitScript({ source });
    }
    async route(url, handler) {
        this._routes.push({ url, handler });
        if (this._routes.length === 1)
            await this._channel.setNetworkInterceptionEnabled({ enabled: true });
    }
    async unroute(url, handler) {
        this._routes = this._routes.filter(route => route.url !== url || (handler && route.handler !== handler));
        if (this._routes.length === 0)
            await this._channel.setNetworkInterceptionEnabled({ enabled: false });
    }
    async screenshot(options = {}) {
        return buffer_1.Buffer.from(await this._channel.screenshot(options), 'base64');
    }
    async title() {
        return this._attributeToPage(() => this._mainFrame.title());
    }
    async close(options = { runBeforeUnload: undefined }) {
        await this._channel.close(options);
        if (this._ownedContext)
            await this._ownedContext.close();
    }
    isClosed() {
        return this._closed;
    }
    async click(selector, options) {
        return this._attributeToPage(() => this._mainFrame.click(selector, options));
    }
    async dblclick(selector, options) {
        return this._attributeToPage(() => this._mainFrame.dblclick(selector, options));
    }
    async fill(selector, value, options) {
        return this._attributeToPage(() => this._mainFrame.fill(selector, value, options));
    }
    async focus(selector, options) {
        return this._attributeToPage(() => this._mainFrame.focus(selector, options));
    }
    async textContent(selector, options) {
        return this._attributeToPage(() => this._mainFrame.textContent(selector, options));
    }
    async innerText(selector, options) {
        return this._attributeToPage(() => this._mainFrame.innerText(selector, options));
    }
    async innerHTML(selector, options) {
        return this._attributeToPage(() => this._mainFrame.innerHTML(selector, options));
    }
    async getAttribute(selector, name, options) {
        return this._attributeToPage(() => this._mainFrame.getAttribute(selector, name, options));
    }
    async hover(selector, options) {
        return this._attributeToPage(() => this._mainFrame.hover(selector, options));
    }
    async selectOption(selector, values, options) {
        return this._attributeToPage(() => this._mainFrame.selectOption(selector, values, options));
    }
    async setInputFiles(selector, files, options) {
        return this._attributeToPage(() => this._mainFrame.setInputFiles(selector, files, options));
    }
    async type(selector, text, options) {
        return this._attributeToPage(() => this._mainFrame.type(selector, text, options));
    }
    async press(selector, key, options) {
        return this._attributeToPage(() => this._mainFrame.press(selector, key, options));
    }
    async check(selector, options) {
        return this._attributeToPage(() => this._mainFrame.check(selector, options));
    }
    async uncheck(selector, options) {
        return this._attributeToPage(() => this._mainFrame.uncheck(selector, options));
    }
    async waitForTimeout(timeout) {
        await this._mainFrame.waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
        return this._attributeToPage(() => this._mainFrame.waitForFunction(pageFunction, arg, options));
    }
    workers() {
        return [...this._workers];
    }
    on(event, listener) {
        if (event === events_1.Events.Page.FileChooser) {
            if (!this.listenerCount(event))
                this._channel.setFileChooserInterceptedNoReply({ intercepted: true });
        }
        super.on(event, listener);
        return this;
    }
    removeListener(event, listener) {
        super.removeListener(event, listener);
        if (event === events_1.Events.Page.FileChooser && !this.listenerCount(event))
            this._channel.setFileChooserInterceptedNoReply({ intercepted: false });
        return this;
    }
    async pdf(options = {}) {
        const binary = await this._channel.pdf(options);
        return buffer_1.Buffer.from(binary, 'base64');
    }
}
exports.Page = Page;
class BindingCall extends channelOwner_1.ChannelOwner {
    static from(channel) {
        return channel._object;
    }
    constructor(scope, guid, initializer) {
        super(scope, guid, initializer);
    }
    async call(func) {
        try {
            const frame = frame_1.Frame.from(this._initializer.frame);
            const source = {
                context: frame._page.context(),
                page: frame._page,
                frame
            };
            this._channel.resolve({ result: await func(source, ...this._initializer.args) });
        }
        catch (e) {
            this._channel.reject({ error: serializers_1.serializeError(e) });
        }
    }
}
exports.BindingCall = BindingCall;
async function waitForEvent(emitter, event, optionsOrPredicate = {}, defaultTimeout) {
    let predicate;
    let timeout = defaultTimeout;
    if (typeof optionsOrPredicate === 'function') {
        predicate = optionsOrPredicate;
    }
    else if (optionsOrPredicate.predicate) {
        if (optionsOrPredicate.timeout !== undefined)
            timeout = optionsOrPredicate.timeout;
        predicate = optionsOrPredicate.predicate;
    }
    let callback;
    const result = new Promise(f => callback = f);
    const listener = helper_1.helper.addEventListener(emitter, event, param => {
        if (predicate && !predicate(param))
            return;
        callback(param);
        helper_1.helper.removeEventListeners([listener]);
    });
    if (timeout === 0)
        return result;
    return Promise.race([
        result,
        new Promise((f, r) => setTimeout(() => r(new errors_1.TimeoutError('Timeout while waiting for event')), timeout))
    ]);
}
exports.waitForEvent = waitForEvent;
//# sourceMappingURL=page.js.map