"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Frame = void 0;
const helper_1 = require("../../helper");
const channelOwner_1 = require("./channelOwner");
const elementHandle_1 = require("./elementHandle");
const jsHandle_1 = require("./jsHandle");
const network_1 = require("./network");
const serializers_1 = require("../serializers");
class Frame extends channelOwner_1.ChannelOwner {
    constructor(scope, guid, initializer) {
        super(scope, guid, initializer);
        this._parentFrame = null;
        this._url = '';
        this._name = '';
        this._detached = false;
        this._childFrames = new Set();
        this._parentFrame = Frame.fromNullable(initializer.parentFrame);
        if (this._parentFrame)
            this._parentFrame._childFrames.add(this);
        this._name = initializer.name;
        this._url = initializer.url;
    }
    static from(frame) {
        return frame._object;
    }
    static fromNullable(frame) {
        return frame ? Frame.from(frame) : null;
    }
    async goto(url, options = {}) {
        return network_1.Response.fromNullable(await this._channel.goto({ url, ...options, isPage: this._page._isPageCall }));
    }
    async waitForNavigation(options = {}) {
        return network_1.Response.fromNullable(await this._channel.waitForNavigation({ ...options, isPage: this._page._isPageCall }));
    }
    async waitForLoadState(state = 'load', options = {}) {
        await this._channel.waitForLoadState({ state, ...options, isPage: this._page._isPageCall });
    }
    async frameElement() {
        return elementHandle_1.ElementHandle.from(await this._channel.frameElement());
    }
    async evaluateHandle(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return jsHandle_1.JSHandle.from(await this._channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: jsHandle_1.serializeArgument(arg), isPage: this._page._isPageCall }));
    }
    async evaluate(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return jsHandle_1.parseResult(await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: jsHandle_1.serializeArgument(arg), isPage: this._page._isPageCall }));
    }
    async $(selector) {
        return elementHandle_1.ElementHandle.fromNullable(await this._channel.querySelector({ selector, isPage: this._page._isPageCall }));
    }
    async waitForSelector(selector, options = {}) {
        return elementHandle_1.ElementHandle.fromNullable(await this._channel.waitForSelector({ selector, ...options, isPage: this._page._isPageCall }));
    }
    async dispatchEvent(selector, type, eventInit, options = {}) {
        await this._channel.dispatchEvent({ selector, type, eventInit: jsHandle_1.serializeArgument(eventInit), ...options, isPage: this._page._isPageCall });
    }
    async $eval(selector, pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 3);
        return await this._channel.evalOnSelector({ selector, expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: jsHandle_1.serializeArgument(arg), isPage: this._page._isPageCall });
    }
    async $$eval(selector, pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 3);
        return await this._channel.evalOnSelectorAll({ selector, expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: jsHandle_1.serializeArgument(arg), isPage: this._page._isPageCall });
    }
    async $$(selector) {
        const result = await this._channel.querySelectorAll({ selector, isPage: this._page._isPageCall });
        return result.map(c => elementHandle_1.ElementHandle.from(c));
    }
    async content() {
        return await this._channel.content();
    }
    async setContent(html, options = {}) {
        await this._channel.setContent({ html, ...options, isPage: this._page._isPageCall });
    }
    name() {
        return this._name || '';
    }
    url() {
        return this._url;
    }
    parentFrame() {
        return this._parentFrame;
    }
    childFrames() {
        return Array.from(this._childFrames);
    }
    isDetached() {
        return this._detached;
    }
    async addScriptTag(options) {
        return elementHandle_1.ElementHandle.from(await this._channel.addScriptTag({ ...options, isPage: this._page._isPageCall }));
    }
    async addStyleTag(options) {
        return elementHandle_1.ElementHandle.from(await this._channel.addStyleTag({ ...options, isPage: this._page._isPageCall }));
    }
    async click(selector, options = {}) {
        return await this._channel.click({ selector, ...options, isPage: this._page._isPageCall });
    }
    async dblclick(selector, options = {}) {
        return await this._channel.dblclick({ selector, ...options, isPage: this._page._isPageCall });
    }
    async fill(selector, value, options = {}) {
        return await this._channel.fill({ selector, value, ...options, isPage: this._page._isPageCall });
    }
    async focus(selector, options = {}) {
        await this._channel.focus({ selector, ...options, isPage: this._page._isPageCall });
    }
    async textContent(selector, options = {}) {
        return await this._channel.textContent({ selector, ...options, isPage: this._page._isPageCall });
    }
    async innerText(selector, options = {}) {
        return await this._channel.innerText({ selector, ...options, isPage: this._page._isPageCall });
    }
    async innerHTML(selector, options = {}) {
        return await this._channel.innerHTML({ selector, ...options, isPage: this._page._isPageCall });
    }
    async getAttribute(selector, name, options = {}) {
        return await this._channel.getAttribute({ selector, name, ...options, isPage: this._page._isPageCall });
    }
    async hover(selector, options = {}) {
        await this._channel.hover({ selector, ...options, isPage: this._page._isPageCall });
    }
    async selectOption(selector, values, options = {}) {
        return await this._channel.selectOption({ selector, values: elementHandle_1.convertSelectOptionValues(values), ...options, isPage: this._page._isPageCall });
    }
    async setInputFiles(selector, files, options = {}) {
        const filePayloads = await serializers_1.normalizeFilePayloads(files);
        await this._channel.setInputFiles({ selector, files: filePayloads.map(f => ({ name: f.name, mimeType: f.mimeType, buffer: f.buffer.toString('base64') })), ...options, isPage: this._page._isPageCall });
    }
    async type(selector, text, options = {}) {
        await this._channel.type({ selector, text, ...options, isPage: this._page._isPageCall });
    }
    async press(selector, key, options = {}) {
        await this._channel.press({ selector, key, ...options, isPage: this._page._isPageCall });
    }
    async check(selector, options = {}) {
        await this._channel.check({ selector, ...options, isPage: this._page._isPageCall });
    }
    async uncheck(selector, options = {}) {
        await this._channel.uncheck({ selector, ...options, isPage: this._page._isPageCall });
    }
    async waitForTimeout(timeout) {
        await new Promise(fulfill => setTimeout(fulfill, timeout));
    }
    async waitForFunction(pageFunction, arg, options = {}) {
        return jsHandle_1.JSHandle.from(await this._channel.waitForFunction({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: jsHandle_1.serializeArgument(arg), ...options, isPage: this._page._isPageCall }));
    }
    async title() {
        return await this._channel.title();
    }
}
exports.Frame = Frame;
//# sourceMappingURL=frame.js.map